{"version":3,"sources":["components/Tile.js","App.js","serviceWorker.js","index.js"],"names":["Tile","_this","this","react_default","a","createElement","className","onClick","props","handleClick","id","src","image","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","clicks","resetGame","message","increaseScore","shuffle","newScore","score","setState","topScore","characters","length","sort","Math","random","_this2","href","class","map","character","src_components_Tile","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o5BAmBeA,0LAZF,IAAAC,EAAAC,KACJ,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OAAOC,QAAW,kBAAMN,EAAKO,MAAMC,YAAYR,EAAKO,MAAME,MACtEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,KAAKM,MAAMI,gBAPlBC,IAAMC,YCmHVC,cAhHb,SAAAA,EAAYP,GAAO,IAAAP,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAd,KAAAa,IACjBd,EAAAe,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAlB,KAAMM,KAaRC,YAAc,SAACC,GACRT,EAAKoB,MAAMC,OAAOZ,IAQrBT,EAAKsB,YACLtB,EAAKoB,MAAMG,QAAS,wCARlBvB,EAAKwB,gBAELxB,EAAKoB,MAAMC,OAAOZ,IAAM,EACxBT,EAAKoB,MAAMG,QAAS,yBACpBvB,EAAKyB,YApBQzB,EA8BnBwB,cAAgB,WAEd,IAAME,EAAW1B,EAAKoB,MAAMO,MAAQ,EACpC3B,EAAK4B,SAAS,CACZD,MAAOD,IAGLA,EAAW1B,EAAKoB,MAAMS,UACxB7B,EAAK4B,SAAS,CACdC,SAAUH,IAGRA,IAAaI,EAAWC,QAC1B/B,EAAK4B,SAAS,CACZL,QAAS,cA5CIvB,EAoDnBsB,UAAY,WAEVtB,EAAK4B,SAAS,CACZD,MAAO,EACPN,OAAQ,KAEVrB,EAAKyB,WA1DYzB,EA6DnByB,QAAU,WACRzB,EAAK4B,SAAS,CACZR,MAAQpB,EAAKoB,MAAMU,WAAWE,KAAM,kBAAMC,KAAKC,SAAW,QA5D5DlC,EAAKoB,MAAQ,CACXO,MAAO,EACPE,SAAU,EACVC,WAAYA,EACZT,OAAQ,GACRE,QAAS,4BAGXvB,EAAKyB,UAXYzB,wEAmEV,IAAAmC,EAAAlC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAe+B,KAAK,KAAjC,4BAGDlC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACfH,EAAAC,EAAAC,cAAA,OAAKiC,MAAO,OACVnC,EAAAC,EAAAC,cAAA,OAAKiC,MAAM,SACTnC,EAAAC,EAAAC,cAAA,sBAAcH,KAAKmB,MAAMO,MAAzB,OACAzB,EAAAC,EAAAC,cAAA,0BAAkBH,KAAKmB,MAAMS,YAGjC3B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAGdH,EAAAC,EAAAC,cAAA,UAAKH,KAAKmB,MAAMG,SACtBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WACfJ,KAAKmB,MAAMU,WAAWQ,IAAI,SAAAC,GAC3B,OACErC,EAAAC,EAAAC,cAACoC,EAAD,CACEC,IAAKF,EAAU9B,GACfE,MAAO4B,EAAU5B,MACjBH,YAAa2B,EAAK3B,YAClBC,GAAI8B,EAAU9B,iBA9FRI,aCKE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2b63264b.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./Tile.css\"\r\n\r\nclass Tile extends React.Component {\r\n\r\n\r\n   \r\n    render() {\r\n         return (\r\n            <div className= \"tile\" onClick= { () => this.props.handleClick(this.props.id)}>\r\n                <img src={this.props.image} />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nexport default Tile;","import React, { Component } from 'react';\nimport './App.css';\nimport characters from \"./characters.json\";\nimport Tile from \"./components/Tile\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      score: 0,\n      topScore: 0,\n      characters: characters, \n      clicks: {},\n      message: \"Click an Image to Begin!\"\n    } \n\n    this.shuffle();\n  }\n\n  handleClick = (id) => {\n    if (!this.state.clicks[id]) {\n        this.increaseScore();\n\n        this.state.clicks[id] = true;\n        this.state.message= \"You Guessed Correctly!\"\n        this.shuffle();\n    }\n    else {\n      this.resetGame();\n      this.state.message= \"You Guessed Incorrectly; Game Over!\"\n    }\n\n  }\n\n\n  increaseScore = () => {\n\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore\n    })\n\n    if (newScore > this.state.topScore)\n      this.setState({\n      topScore: newScore\n    })\n\n    if (newScore === characters.length) {\n      this.setState({\n        message: \"You Won!\"\n      })\n    }\n\n      \n\n  }\n\n  resetGame = () => {\n  \n    this.setState({\n      score: 0,\n      clicks: {}\n    })\n    this.shuffle();\n  }\n  \n  shuffle = () => {\n    this.setState({\n      state:  this.state.characters.sort( () => Math.random() - 0.5)\n    })\n  \n  }\n  render() {\n    return (\n      <div className=\"container-fluid>\">\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <a className=\"navbar-brand\" href=\"#\">An Atypical Clicky Game</a>\n        </nav>\n\n         <div className= \"container\">\n          <div class= \"row\">\n            <div class=\"col-3\">\n              <span>Score: {this.state.score} | </span>\n              <span>Top Score: {this.state.topScore}</span>\n            </div>\n          </div>\n          <div className= \"row\">\n            <div className= \"col-6\">\n            </div>\n          </div>\n              <h2>{this.state.message}</h2>\n        <div className= \"wrapper\">\n        {this.state.characters.map(character => {\n        return (\n          <Tile \n            key={character.id}\n            image={character.image} \n            handleClick={this.handleClick}\n            id={character.id}\n          />\n        )\n      })\n  }\n      </div>\n      </div>\n      </div>\n    \n    );\n  }\n}\n\n\n\n  \n\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}